<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/data/jpa  http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/util      http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/task      http://www.springframework.org/schema/task/spring-task.xsd

        http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc.xsd

        http://www.springframework.org/schema/data/jpa  http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
    
    <!-- needed by javers -->    
<!--     <aop:aspectj-autoproxy /> -->
       
    <!-- read external properties config -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="ignoreResourceNotFound" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:calipso.defaults.properties</value>
                <value>classpath:calipso.properties</value>
            </list>
        </property> 
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
	    <property name="properties">
	        <value>calipso.initClass.replaced=${calipso.initClass}</value>
	    </property>
    </bean>
    
    <!-- Setup default file storage adapter -->
	<bean class="com.restdude.app.fs.FilePersistenceConfigPostProcessor">
    </bean>
    
    <!-- Generate controllers, services and repositories for entities with @ModelResource -->
    <bean id="entityPostProcessor" class="gr.abiss.calipso.tiers.processor.ModelDrivenBeanGeneratingRegistryPostProcessor" />
    
    <!-- override resthub's MapperFeature.DEFAULT_VIEW_INCLUSION config -->
    <bean id="jsonObjectMapperFactory" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean" p:indentOutput="true" p:failOnEmptyBeans="false">
        <property name="featuresToDisable">
            <array>
                <util:constant static-field="com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES"/>
            </array>
        </property>
        <property name="featuresToEnable">
            <array>
                <util:constant static-field="com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION"/>
            </array>
        </property>
        <property name="modulesToInstall" ref="jacksonModules"/>
    </bean>
    
    <!-- jackson config -->
    <bean id="xmlObjectMapperFactory" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean" p:indentOutput="true" p:failOnEmptyBeans="false">
        <property name="featuresToDisable">
            <array>
                <util:constant static-field="com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES"/>
            </array>
        </property>
        <property name="featuresToEnable">
            <array>
                <util:constant static-field="com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION"/>
            </array>
        </property>
        <property name="modulesToInstall" ref="jacksonModules"/>
        <property name="objectMapper" ref="xmlMapper" />
    </bean>
	<bean class="com.fasterxml.jackson.datatype.joda.JodaModule"></bean>
	<bean class="com.fasterxml.jackson.datatype.joda.JodaModule"></bean>
<!-- 	<bean id="conversionService" -->
<!-- 		class="org.springframework.context.support.ConversionServiceFactoryBean"> -->
  <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" >
		<property name="converters">
			<set>
				<!-- converters is a set of both converters and converterfactories -->
				<bean class="gr.abiss.calipso.model.serializers.CustomEnumConverterFactory" />
				<bean class="com.restdude.app.friends.binding.FriendshipIdDeserializer"/>
			</set>
		</property>
	</bean>
    
    <!-- auth config -->
    <bean id="userDetailsConfig"
		  class="com.restdude.auth.userdetails.util.SimpleUserDetailsConfig">
        <constructor-arg value="calipso-sso" />
        <constructor-arg value="${calipso.domain}" />
        <constructor-arg value="/" />
    </bean>
    
    <!--  By defining this object as a Bean, Spring Security is exposed as SpEL expressions for creating Sp	ring Data queries.  -->
    <bean class="org.springframework.security.data.repository.query.SecurityEvaluationContextExtension" />
    <!-- extend resthub JPA config databaseProperties -->
    <bean id="jpaProperties" parent="resthubCoreJpaProperties">
	    <property name="sourceMap">
	        <map merge="true">
				<entry key="jadira.usertype.autoRegisterUserTypes" value="true"/>
				<!---entry key="hibernate.globally_quoted_identifiers" value="true" /-->
	        </map>
	    </property>
	</bean>
	
<!-- 	<bean id="auditorBean" class="gr.abiss.calipso.web.spring.AuditorBean" /> -->
<!-- 	<jpa:auditing auditor-aware-ref="auditorBean"/> -->
	
	<context:component-scan base-package="
    	**.calipso,
    	com.restdude,
    	org.resthub" />
	<jpa:repositories base-package="
    	**.calipso,
    	com.restdude,
    	org.resthub"
		factory-class="gr.abiss.calipso.tiers.repository.ModelRepositoryFactoryBean" />

	<!-- THYMELEAF: Template Resolver for email templates -->
	<bean id="emailTemplateResolver"
		class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
		<property name="prefix" value="mail/" />
		<property name="templateMode" value="HTML5" />
		<property name="characterEncoding" value="UTF-8" />
		<property name="order" value="1" />
	</bean>
	<!--bean id="webTemplateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver"> 
		<property name="prefix" value="/WEB-INF/templates/" /> <property name="suffix" 
		value=".html" /> <property name="templateMode" value="HTML5" /> <property 
		name="characterEncoding" value="UTF-8" /> </bean -->
	<!-- THYMELEAF: Template Engine (Spring3-specific version) -->

	<bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
		<property name="templateResolvers">
			<set>
				<ref bean="emailTemplateResolver" />
				<!-- ref bean="webTemplateResolver" / -->
			</set>
		</property>
	</bean>
	<bean class="org.resthub.web.LoggingHandlerExceptionResolver" />
	<bean class="org.springframework.orm.hibernate4.HibernateExceptionTranslator" />
	<!-- Executor for the methods marked with @async annotations -->
	<task:executor id="asyncExecutor" pool-size="25" />
	<!-- Configuration for the Runtime -->
	<task:annotation-driven executor="asyncExecutor" />

	<util:list id="messageConverters">
		<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"
			  p:objectMapper-ref="jsonObjectMapperFactory"/>
		<bean class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter"
			  p:objectMapper-ref="xmlObjectMapperFactory"/>
		<bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
		<bean class="com.restdude.app.binding.CsvMessageConverter"/>
	</util:list>

	<mvc:resources mapping="/static/**" location="/static/" />

	<!--mvc:default-servlet-handler/ -->

	<!-- Message externalization/internationalization -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n/messages" />
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>


	<!-- JSP views setup -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
	</bean>

	<!-- imports -->
	<import resource="applicationContext-email.xml" />
	<import resource="applicationContext-security.xml" />
    <import resource="applicationContext-scheduler.xml" />
    <!-- import resource="applicationContext-acl.xml" /-->
	<import resource="applicationContext-social.xml" />
	<!--import resource="applicationContext-swagger.xml" /-->


	<bean id="userService" class="com.restdude.app.users.service.impl.UserServiceImpl">
	</bean>
	<alias name="userService" alias="localUserService" />
	
    <!-- Springfox/Swagger config -->
     <!-- Enables swgger ui-->
    <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>
<!--     <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/> -->
    <mvc:resources mapping="/webjars/**" location="/webjars/"/>

    <!-- Include a swagger configuration-->
<!-- 	<bean name="applicationSwaggerConfig" class="gr.abiss.calipso.web.spring.ApplicationSwaggerConfig"/> -->
	
	<!-- actuator stats -->
<!-- 	<beans> -->
<!--         <context:annotation-config /> -->
<!--         <bean name="endpointAutoConfiguration" class="org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration"/> -->
<!--     </beans> -->
    
</beans>