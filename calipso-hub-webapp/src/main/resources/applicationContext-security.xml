<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd">
	
    <!-- choose the default user controller-->
     <bean id="userController"
		   class="com.restdude.app.users.controller.UserController"/>
    <!-- choose the default userDetails controller -->
     <bean id="userDetailsController"
		   class="com.restdude.auth.userdetails.controller.UserDetailsController"/>
    <!-- Calipso UserDetailsService implementation -->
    <bean id="userDetailsService"
		  class="com.restdude.auth.userdetails.service.impl.UserDetailsServiceImpl"
		  autowire="byType" />
	<!-- and an alias for the LovalUser service -->
	
	<!-- Do not create sessions -->
	<bean id="securityContextPersistenceFilter"
		class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
		   <constructor-arg>
		        <bean class='org.springframework.security.web.context.HttpSessionSecurityContextRepository'>
		          <property name='allowSessionCreation' value='false' />
		        </bean>
		   </constructor-arg>
	</bean>

	<!-- Declare an authentication-manager to use custom userDetailsService implementations -->
	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider user-service-ref='userDetailsService'>
			<sec:password-encoder ref="passwordEncoder"/>
		</sec:authentication-provider>
		<!--sec:authentication-provider ref="socialAuthenticationProvider"/-->
	</sec:authentication-manager>

	<sec:http create-session="stateless" entry-point-ref="restAuthenticationEntryPoint" use-expressions="true"
			  disable-url-rewriting="true" authentication-manager-ref="authenticationManager">
		<sec:headers>
			<sec:frame-options policy="SAMEORIGIN"/>
		</sec:headers>
		<!-- Disable Spring Security CSRF protection since 
		it requires sessions and we don't really want those 
		in a stateless app
         -->
        <sec:csrf disabled="true"/>


		<!-- allow anonymous register/login etc. -->
		<sec:intercept-url pattern="/apiauth/**" access="permitAll()"/>
		<sec:intercept-url pattern="/api/auth/**" access="permitAll()"/>

		<!-- for spring social login/signup -->
		<sec:intercept-url pattern="/login" access="permitAll"/>
		<sec:intercept-url pattern="/signin/**" access="permitAll"/>
		<sec:intercept-url pattern="/signup/**" access="permitAll"/>

		<!-- protect REST API  modifying methods-->
		<sec:intercept-url pattern="/api/rest/**" method="POST" access="isAuthenticated()"/>
		<sec:intercept-url pattern="/api/rest/**" method="PUT" access="isAuthenticated()"/>
		<sec:intercept-url pattern="/api/rest/**" method="PATCH" access="isAuthenticated()"/>
		<sec:intercept-url pattern="/api/rest/**" method="DELETE" access="isAuthenticated()"/>

		<sec:http-basic/>
        <sec:logout invalidate-session="true" />
		
        <!-- Adds social authentication filter to the Spring Security filter chain. 
        <sec:custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />-->
	</sec:http>


	<!-- sec:websocket-message-broker>
	        <sec:intercept-message type="CONNECT" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
	        <sec:intercept-message type="UNSUBSCRIBE" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
	        <sec:intercept-message type="DISCONNECT" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
	        <sec:intercept-message type="MESSAGE" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
	        <sec:intercept-message type="SUBSCRIBE" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
	        <sec:intercept-message pattern="/app/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
	        <sec:intercept-message pattern="/topic/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
	        <sec:intercept-message pattern="/user/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')" />
	</sec:websocket-message-broker-->


	<!-- To enable Method Security Expressions and custom PermissionEvaluator
        we need to add the following 
    -->
    <!--
    Configures the social authentication filter which integrates Spring Social
    with Spring Security.
    <bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
        <constructor-arg index="0" ref="authenticationManager"/>
        <constructor-arg index="1" ref="userIdSource"/>
        <constructor-arg index="2" ref="usersConnectionRepository"/>
        <constructor-arg index="3" ref="connectionFactoryLocator"/>

        <property name="signupUrl" value="/register" />
        <property name="postLoginUrl" value="/manager/"/>
        
        
    </bean> 
    -->


</beans>